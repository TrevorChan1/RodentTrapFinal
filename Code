#include <SPI.h>
#include <WiFiNINA.h>
#include <TinyGPS++.h>
#include <Servo.h>
#include <ArduinoBLE.h>
#include <SoftwareSerial.h>

TinyGPSPlus gps;
WiFiClient client;
SoftwareSerial ss(4,3);

uint8_t connection_state = 0;
uint16_t reconnect_interval = 10000;
char ssid[] = "BU Guest (unencrypted)";
char password[] = ""; 
int status = WL_IDLE_STATUS;     // the WiFi radio's status
char   HOST_NAME[] = "maker.ifttt.com";
String PATH_NAME = "/trigger/send_notif/with/key/gMCw6J23y2mYwEIomD33cy8ypdoY1fZpHL430lFKvSg"; 
String userEmail = "finnabouttacatchsomerats@gmail.com";

Servo MyServo;
int BUTTON = 2;
int LED = 7;

BLEService ledService("19B10000-E8F2-537E-4F6C-D104768A1214"); // BLE LED Service
// BLE LED Switch Characteristic - custom 128-bit UUID, read and writable by central
BLEByteCharacteristic switchCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);

uint8_t WiFiConnect(const char* nSSID = nullptr, const char* nPassword = nullptr)
{
    static uint16_t attempt = 0;
    if(nSSID) {
        WiFi.begin(nSSID, nPassword);
    }
    uint8_t i = 0;
    while(WiFi.status()!= WL_CONNECTED){
        delay(200);
        WiFi.begin(nSSID, nPassword);
    }
    return true;
}

void Awaits(){
    uint32_t ts = millis();
    while(!connection_state){
        delay(50);
        if(millis() > (ts + reconnect_interval) && !connection_state){
            connection_state = WiFiConnect();
            ts = millis();
        }
    }
}

static void smartDelay(unsigned long ms){
  unsigned long start = millis();
  do{
    while (ss.available())
      gps.encode(ss.read());
  } while (millis() - start < ms);
}


void setup(){
  Serial.begin(9600);
  ss.begin(9600); //Start the GPS Serial
  MyServo.attach(5);
  pinMode(BUTTON,INPUT); //Set up the switch to search for changes in voltage
  pinMode(LED,OUTPUT); //Set up the LED
  digitalWrite(7,LED); //Start LED as off
}

bool Initialized = false;
bool switchOn = false;
bool EmailSent = false;
bool BTsignal = false;
String StoredLocation;
String SentLocation;

void loop(){
  WiFiClient client;
  if (Initialized == false){
    MyServo.write(30); // Set Servo Motor to its initial position = open
    float lng;
    float lat;
    while (Initialized ==false){
      if(gps.location.isValid()) {
        Serial.println("Valid location");
        unsigned long start = millis();
        do {
          if(gps.location.isUpdated()){
            lat = gps.location.lat(),6;
            lng = gps.location.lng(),6;
            smartDelay(1000);
          }
        } while (millis() - start < 5000&& gps.location.isValid());
        if (millis() > 4000){
          StoredLocation = String(String(lat,6) + "," + String(lng,6));
          Serial.println(StoredLocation);
          Initialized = true;
          Serial.println("Initialized");
        }
        else{
          Serial.println("Error: Signal Lost");
        }
      }
      smartDelay(1000);
    }
  }
  if (switchOn ==false){
    while (switchOn == false){
      if(digitalRead(2)==LOW){
        MyServo.write(150);
        switchOn = true;
        Serial.println("Switch activated");
        digitalWrite(LED,HIGH);
      }
      //Find location n set location
      if(gps.location.isValid() && gps.location.isUpdated()){
        StoredLocation = String(String(gps.location.lat(),6)+","+String(gps.location.lng(),6));
        smartDelay(1000);
        Serial.println(StoredLocation);
      }
    }
    if(gps.location.isValid()){
      StoredLocation = String(String(gps.location.lat(),6)+","+String(gps.location.lng(),6));
    }
    connection_state = WiFiConnect(ssid,password);
    while(!connection_state){
      Awaits();
    }
    Serial.println("Connected to WiFi");
    while (client.connect(HOST_NAME, 80) == false) {
    delay(100);
    client.connect(HOST_NAME, 80);
  }

  
  Serial.println("Connected to server");
    String queryString = String("?value1="+userEmail + "&value2=http://www.google.com/maps/place/" + StoredLocation);
    client.println("GET " + PATH_NAME + queryString + " HTTP/1.1");
    client.println("Host: " + String(HOST_NAME));
    client.println("Connection: close");
    client.println(); // end HTTP header

    while (client.connected()) {
      if (client.available()) {
        // read an incoming byte from the server and print it to serial monitor:
        char c = client.read();
        Serial.print(c);
      }
    }
    client.stop();
    Serial.println();
    Serial.println("disconnected");
    // Start bluetooth
    while (!BLE.begin()) {
    Serial.println("starting BLE failed!");
    delay(100);   
  }
  BLE.setLocalName("Arduino");
  BLE.setAdvertisedService(ledService);
  // set advertised local name and service UUID:
  // add the characteristic to the service
  ledService.addCharacteristic(switchCharacteristic);
  // add service
  BLE.addService(ledService);
  // set the initial value for the characeristic:
  switchCharacteristic.writeValue(0);
  BLE.advertise();
  // start advertising
  Serial.println("Bluetooth On");
  }
  if(BTsignal == false){
    while(BTsignal==false){
      // listen for BLE peripherals to connect:
  BLEDevice central = BLE.central();
  // if a central is connected to peripheral:
  if (central) {
      // any value other than 0
          MyServo.write(30);
          BTsignal = true;
          Serial.println("Bluetooth signal found");
          BLE.disconnect();        // will turn the LED off
        }
  }
      delay(1000);
    digitalWrite(LED,LOW);
    Serial.println("Re-initializing code");
    switchOn = false;
    EmailSent = false;
    BTsignal = false;
    Initialized = false;
    delay(60000);
  }
  Serial.println("At end of loop");
}
